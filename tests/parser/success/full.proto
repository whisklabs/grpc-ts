
syntax =     "proto3";

package whisk.api.user.v2;

option go_package = "userv2";
option java_package = "com.whisk.api.user.v2";

import "google/api/annotations.proto";
import "google/api/field_mask.proto";
import "google/api/empty.proto";
import "whisk/api/user/v2/user.proto";

enum Gender { // Gender is one or two.
  GENDER_UNSPECIFIED = 0;
  GENDER_MALE = 1;
  GENDER_FEMALE = 2;
};

// NumericEnum is one or zero.
enum NumericEnum {

  ZERO = 0; // ZERO means 0
  // ONE means 1
  ONE = 1;
}

// example file
message Test2 { // example file
  required string hello = 2;
  /*fgfg
    dfv */
  message Nested {
    optional bytes thing = 1; // Line comment
    // Line comment2
    optional bytes thing = 1;
  }
}

message Person {
  enum PhoneType {
    // option allow_alias = true;
    MOBILE = 0 [
     (enum_value_is_deprecated) = true,
      (some_second_option) = "value1, value2, value3",
      (some_third_option) = '[value1, value2, value3]'
    ];
    /*
      some text
      multiline
    */
    HOME = 1 [ (google.api.http) = true, my_me.dg.dfg = 123, my_method_option.df.df = 456, (my_method_option).foo.df.df = 789, (my_method_option).bar = "Some string" ];
    WORK = 2;
    WORK2 = 22 [(foo_options).opt1 = 123, (foo_options).opt2 = "baz"];
    WORK3 = 33 [(foo_options) = { opt1: 123 opt2: "baz" }];
  }
}

// Check enum with reserved values
message BannerIsDisplayed {
  enum Promo {
    // reserved values to align with BannerButtonClicked
    reserved 4,5,6,7,8,9,10,11;

    PROMO_UNKNOWN = 0;
    PROMO_APP_INSTALL = 1;
    PROMO_LEARN_HOW_TO_SAVE = 2;
    PROMO_SHARE_RECIPE = 3;
    PROMO_CONNECT_SAMSUNG_HEALTH_SDK = 12;
  }

  Promo promo = 1;
}

// example file
message Test {
  map<string, string> data = 1;
  map<string, string> data3 = 10;
  required string hello = 2;
  oneof test {
    uint32 age = 3;
    uint32 year = 4;
  }
  message Nested { optional bytes thing = 1; }
}

service UserAPI {
  rpc GetMe(GetMeRequest) returns (GetMeResponse) {
    option (google.api.http) = {
      get : "/user/v2/me"
    };
  }
  /* fgfg
   */
  rpc Get(google.protobuf.Empty) returns (GetMeResponse); // Empty rpc
  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      patch : "/user/v2/settings"
      body : "*"
      additional_bindings : {patch : "/user/v2/settings/{id}" body : "*"}
      additional_bindings :{put : "/user/v2/settings/{id}" body : "*"}
    };
  }
}

message TestItem {
  // Required
  string id = 1;
  string name = 2 [ required = true ];

  // Optional
  google.protobuf.StringValue description = 10;
  google.protobuf.StringValue test = 11 [ required = true ];
  repeated google.protobuf.StringValue array = 12;

  // External message
  whisk.api.shared.v1.Time time = 30;
  whisk.api.shared.v1.Date date = 31 [ (required) = true ];

  repeated SearchRecipesResponse searches = 40;
  map<string, SearchRecipesResponse> map_search = 41;
  SearchRecipesResponse search = 42;

  reserved 3, 15, 6 to 9, 60 to max;
  reserved "FOO", "BAR";
}
